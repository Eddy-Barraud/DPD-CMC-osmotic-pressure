#  This is the control script for LAMMPS.
# Run with OMP : -pk omp 20 -sf omp
# Run with GPU : -pk gpu 0 pair/only yes neigh no -sf gpu
# Run with both : -pk gpu 2 neigh no -pk omp 20 -sf hybrid gpu omp
echo			both

#-------------------------------------------------------------------------------
# Initialize LAMMPS run for 3-d periodic
#-------------------------------------------------------------------------------

include 0.part.init.variables.lmps

#-------------------------------------------------------------------------------
# Stage 0: Read the restart
#-------------------------------------------------------------------------------

read_restart ${dName}/3.eq.done.restart

#-------------------------------------------------------------------------------
# Stage 1: Set back the parameters
#-------------------------------------------------------------------------------

include 0.part.cross.lmps

#-------------------------------------------------------------------------------
# Stage 4: Production 
#             NVE integration for 500 000 steps with a timestep of 0.01
#             Temperature 1
#             Walls 2
#-------------------------------------------------------------------------------


reset_timestep 0

write_data      ${dName}/4.topo.ovito.data
dump 		trj notWaterGrp atom/gz 500 ${dName}/4.trj.notWater.xyz.gz


# Add walls that constrain ions in a control volume that reduces along the run
# The distance with particles must always be positive for wall forces
# The effective control volume is zhi-zlo-2*cutoff = 10

fix         walls   notWaterGrp    wall/harmonic/returned zlo ${wall1Pos} v_wallForce v_sigma ${wallCutoffLo} zhi ${wall2Pos} v_wallForce v_sigma ${wallCutoffHi} pbc yes
fix_modify  walls   energy      yes

# Calculate the osmotic pressure P=F/S
variable    membraneSurface     equal   lx*ly*2 # 2 walls
variable    wallAppliedForce    equal   abs(f_walls[1])+abs(f_walls[2])
variable    osmoticPressure     equal   v_wallAppliedForce/v_membraneSurface
variable    waterInVc           equal count(waterGrp,inVc)

fix			1 all nve
fix			2 all ave/time 1 1 1 v_time v_systemp v_p v_sysvol v_sysdensity v_etotal v_pe v_ke v_evdwl v_ebond v_eangle v_coulomb v_waterInVc f_walls v_osmoticPressure file ${dName}/4.instantaneous.csv
fix			3 all ave/time 1 100 100 v_time v_systemp v_p v_sysvol v_sysdensity v_etotal v_pe v_ke v_evdwl v_ebond v_eangle v_coulomb v_waterInVc f_walls v_osmoticPressure v_VcVol file ${dName}/4.ave.csv

# Save the energies every 10 timestep
fix  		trjE all ave/time 10 1 10 v_etotal v_pe v_ke f_walls file ${dName}/4.energies.csv

thermo_style		custom step v_time press vol v_sysdensity temp etotal evdwl ecoul pe ke f_walls v_osmoticPressure
thermo 1000

# Create density bins
compute slices all chunk/atom bin/1d z lower 0.2 compress yes units box
fix tensioDens  tensioGrp    ave/chunk 10  4900 50000 slices density/number file ${dName}/4.tensio.density.csv
fix KDens      KGrp        ave/chunk 10  4900 50000 slices density/number file ${dName}/4.K.density.csv
fix WaterDens   waterGrp     ave/chunk 10  4900 50000 slices density/number file ${dName}/4.Water.density.csv

# TD format : # t Eb Epl Etor LJin LJex ESin ESex Ep Etot Ham Pcm Pat Tt Tr Tat rho Pxy/Posmo  V H Gamma_KB
fix  		tdGlobal all ave/time 1 1 1 v_time v_ebond v_zero v_zero v_zero v_evdwl v_zero v_coulomb v_pe v_etotal v_zero v_p v_p &
v_zero v_zero v_systemp v_sysdensity v_osmoticPressure v_sysvol v_zero v_zero file ${dName}/4.td.out


run             ${prodRunLen}


thermo_style multi # reset thermo
write_restart    ${dName}/4.prod.restart
write_dump 		 all xyz ${dName}/4.prod.xyz
write_dump 		 all custom ${dName}/4.prod.xyz type x y z modify sort 1

